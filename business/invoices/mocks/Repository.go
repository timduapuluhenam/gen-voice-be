// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	invoices "genVoice/business/invoices"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateInvoiceDetail provides a mock function with given fields: invoiceDetailDomain
func (_m *Repository) CreateInvoiceDetail(invoiceDetailDomain *invoices.DatasDomain) (invoices.DatasDomain, error) {
	ret := _m.Called(invoiceDetailDomain)

	var r0 invoices.DatasDomain
	if rf, ok := ret.Get(0).(func(*invoices.DatasDomain) invoices.DatasDomain); ok {
		r0 = rf(invoiceDetailDomain)
	} else {
		r0 = ret.Get(0).(invoices.DatasDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*invoices.DatasDomain) error); ok {
		r1 = rf(invoiceDetailDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvoice provides a mock function with given fields: invoiceID
func (_m *Repository) DeleteInvoice(invoiceID int) (invoices.InvoiceDomain, error) {
	ret := _m.Called(invoiceID)

	var r0 invoices.InvoiceDomain
	if rf, ok := ret.Get(0).(func(int) invoices.InvoiceDomain); ok {
		r0 = rf(invoiceID)
	} else {
		r0 = ret.Get(0).(invoices.InvoiceDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(invoiceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUserID provides a mock function with given fields: userID
func (_m *Repository) GetAllByUserID(userID int) ([]invoices.InvoiceDetailDomain, error) {
	ret := _m.Called(userID)

	var r0 []invoices.InvoiceDetailDomain
	if rf, ok := ret.Get(0).(func(int) []invoices.InvoiceDetailDomain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invoices.InvoiceDetailDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllEventByUserID provides a mock function with given fields: userID
func (_m *Repository) GetAllEventByUserID(userID int) ([]invoices.InvoiceDomain, error) {
	ret := _m.Called(userID)

	var r0 []invoices.InvoiceDomain
	if rf, ok := ret.Get(0).(func(int) []invoices.InvoiceDomain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]invoices.InvoiceDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceDetailByID provides a mock function with given fields: id
func (_m *Repository) GetInvoiceDetailByID(id string) (invoices.InvoiceDetailDomain, error) {
	ret := _m.Called(id)

	var r0 invoices.InvoiceDetailDomain
	if rf, ok := ret.Get(0).(func(string) invoices.InvoiceDetailDomain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(invoices.InvoiceDetailDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
